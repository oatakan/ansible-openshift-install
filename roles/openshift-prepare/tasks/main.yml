---
- name: build hosts file
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_default_ipv4.address }} {{ item }}" state=present
  when: hostvars[item].ansible_default_ipv4.address is defined
  with_items: "{{ play_hosts }}"

- name: install packages
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
  - https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  - PyYAML
  - python-devel
  - openssl-devel
  - iptables-services
  - bridge-utils
  - atomic-openshift-utils
  - atomic-openshift-excluder
  - atomic-openshift-docker-excluder
  ignore_errors: true

- name: install more packages
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
  - python-pip

- name: pip upgrade setuptools and pip
  pip:
    name: "{{ item }}"
    state: latest
  with_items:
  - pip
  - setuptools

#- name: install ansible and ansible-container
#  pip:
#    name: "{{ item }}"
#    state: latest
#  with_items:
#  - ansible
#  - ansible-container

- name: enable selinux
  selinux:
    policy: targeted
    state: enforcing

- name: Reboot server
  shell: "sleep 3; /usr/sbin/shutdown -r now"
  async: 1
  poll: 0
  failed_when: false
  changed_when: true
  ignore_errors: true
  when: ansible_ssh_host != '127.0.0.1'

- name: Wait for reboot to start
  pause:
    seconds: 5

- name: waiting for system to come online
  wait_for: host="{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}" port="{{ hostvars[inventory_hostname].ansible_ssh_port | default('22') }}" search_regex=OpenSSH
  delegate_to: 127.0.0.1
  become: no
  when: inventory_hostname != '127.0.0.1' or hostvars[inventory_hostname].ansible_host != '127.0.0.1'

- name: unexclude atomic-openshift package for the duration of the install
  command: atomic-openshift-excluder unexclude

- name: install Docker
  yum: name=docker state=installed update_cache=yes
  register: dockerInstalled
  notify:
  - Start Docker

- meta: flush_handlers

- name: Insecure Registry Config
  lineinfile: dest=/etc/sysconfig/docker  regexp="^OPTIONS" line=OPTIONS='--selinux-enabled --insecure-registry 172.30.0.0/16 --log-opt max-size=1M --log-opt max-file=3' backup=yes backrefs=yes state=present
  register: dockerConfigUpdated

#- name:  Create Docker Storage Config
#  when: dockerInstalled|success
#  shell: echo "DEVS={{ docker_storage_mount}}" > /etc/sysconfig/docker-storage-setup; echo "VG=docker-vg" >> /etc/sysconfig/docker-storage-setup
#  args:
#    creates: /etc/sysconfig/docker-storage-setup

- name: Create Docker Storage Config
  blockinfile:
    dest: /etc/sysconfig/docker-storage-setup
    create: yes
    content: |
      DEVS={{ docker_storage_mount}}
      VG=docker-vg
  register: dockerStorageConfigFileCreated
  notify:
  - Stop Docker
  - Clean Docker Data

- meta: flush_handlers

- name: Check if LVS exists
  shell: lvs | grep docker-pool | awk '{ print $1}'
  register: dockerpoolLVS

- name: Docker Storage Setup
  when: dockerpoolLVS.stdout != "docker-pool" and dockerStorageConfigFileCreated|success
  command: docker-storage-setup
  register: dockerStorageSetupComplete
  notify:
  - Stop Docker
  - Clean Docker Data
  - Start Docker


