---

- name: Windows | Setup all the Windows machines prerequisites (this may take a while)
  win_shell: |
    $ErrorActionPreference = "Stop"
    $reboot = $false
    $regNamespace = 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters'
    $key = Get-ItemProperty -Path $regNamespace -Name 'DisabledComponents' -ErrorAction SilentlyContinue
    if(!$key -or ($key.DisabledComponents.GetType() -ne [UInt32] -or $key.DisabledComponents -ne [Uint32]'0xffffffff')) {
        Remove-ItemProperty -Path $regNamespace -Name 'DisabledComponents' -ErrorAction SilentlyContinue
        Write-Output "Disabling IPv6"
        New-ItemProperty -Path $regNamespace -Name 'DisabledComponents' -Value '0xffffffff' -PropertyType 'DWord'
        $reboot = $true
    }
    $status = Get-WindowsFeature -Name "Hyper-V"
    if($status.InstallState -eq "Installed") {
        Remove-WindowsFeature "Hyper-V"
        bcdedit.exe /set hypervisorlaunchtype off
        if($LASTEXITCODE) {
            Throw "Failed to set bcd setting hypervisorlaunchtype to off"
        }
    }
    if($env:COMPUTERNAME -ne "{{ inventory_hostname_short }}") {
        Write-Output "Renaming the computer to {{ inventory_hostname_short }}"
        Rename-Computer -NewName "{{ inventory_hostname_short }}" -Force -Confirm:$false
        $reboot = $true
    }
    Write-Output "Installing the required Windows features"
    $state = Install-WindowsFeature -Name "Containers" -Confirm:$false -ErrorAction Stop
    if($state.Success -ne $true) {
        Throw "Failed to install Containers Windows feature"
    }
    if($state.RestartNeeded -eq "Yes") {
        $reboot = $true
    }
    Write-Output "Installing all the available Windows updates"
    Install-Package PSWindowsUpdate -Force
    $updates = Get-WUInstall -AcceptAll -IgnoreReboot
    $updates | ForEach-Object {
        if($_.RebootRequired) {
            $reboot = $true
        }
    }
    # Reboot if needed
    if($reboot) {
        Write-Output "Rebooting computer"
        Restart-Computer -Force
    }
- name: Windows | Wait for the Windows machines to be ready after prerequisites setup
  wait_for_connection:
    # We reboot via PowerShell one task above. Wait 30 seconds before checking for
    # connection to make sure that node completely shuts down before starting again.
    delay: 30
    # 1 hour timeout (worst case scenario for all the Windows nodes)
    timeout: 3600
- name: Windows | Install Docker
  win_shell: |
    $ErrorActionPreference = "Stop"
    Write-Output "Installing Docker {{ windows_docker_version }}"
    Find-PackageProvider -Name "Nuget" | Install-PackageProvider -Force
    Install-Module -Name "DockerMsftProvider" -Repository "PSGallery" -Force
    Install-Package -Name "Docker" -ProviderName "DockerMsftProvider" -Force
- name: Windows | Setup Docker service
  win_shell: |
    $ErrorActionPreference = "Stop"
    $DOCKER_SERVICE_NAME = "Docker"
    Set-Service $DOCKER_SERVICE_NAME -StartupType Disabled
    Stop-Service $DOCKER_SERVICE_NAME
    Get-HnsNetwork | Where-Object { $_.Name -eq "nat" } | Remove-HnsNetwork
    $configFile = Join-Path $env:ProgramData "Docker\config\daemon.json"
    $configDir = Split-Path -Path $configFile -Parent
    if(!(Test-Path $configDir)) {
        New-Item -ItemType "Directory" -Force -Path $configDir
    }
    Set-Content -Path $configFile -Value '{ "bridge" : "none" }' -Encoding Ascii
    Set-Service $DOCKER_SERVICE_NAME -StartupType Automatic
    sc.exe failure $DOCKER_SERVICE_NAME reset=40 actions=restart/0/restart/0/restart/30000
    if($LASTEXITCODE) {
        Throw "Failed to set failure actions"
    }
    sc.exe failureflag $DOCKER_SERVICE_NAME 1
    if($LASTEXITCODE) {
        Throw "Failed to set failure flags"
    }
    Start-Service $DOCKER_SERVICE_NAME
- block:
    - name: Windows | Remove old Bin and K directories if it exists
      win_file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ bin_dir_path }}"
        - "{{ k_dir_path }}"
  rescue:
    - name: ensure kubelet and kubeovn services are stopped
      win_service:
        name: "{{ item }}"
        state: stopped
        force_dependent_services: yes
      loop:
        - ocpkubelet
        - kubeovn

    - name: Windows | Remove old Bin and K directories if it exists
      win_file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ bin_dir_path }}"
        - "{{ k_dir_path }}"

- name: Windows | Create Bin and K directories
  win_file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ bin_dir_path }}"
    - "{{ k_dir_path }}"
- name: Windows | Set ChocolateyBinRoot
  win_shell: setx -m ChocolateyBinRoot "{{ bin_dir_path }}"
- name: Windows | Install Chocolatey package manager
  win_shell: |
    $ErrorActionPreference = "Stop"
    Set-ExecutionPolicy Bypass -Scope Process -Force
    Invoke-WebRequest -Uri "https://chocolatey.org/install.ps1" -UseBasicParsing | Invoke-Expression
  retries: 5
  delay: 5
- name: Windows | Add Chocolatey and Bin to system path
  win_shell: |
    $ErrorActionPreference = "Stop"
    $systemPath = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") -split ';'
    if("{{ item }}" -notin $systemPath) {
        $systemPath += "{{ item }}"
        [System.Environment]::SetEnvironmentVariable("PATH", ($systemPath -join ';'), "Machine")
    }
  with_items:
    - '${env:ProgramData}\chocolatey\bin'
    - "{{ bin_dir_path }}"
- name: Windows | Install nssm
  win_shell: choco install nssm -y
  retries: 5
  delay: 5
- name: Windows | Install Vim (potential failures will be ignored since this is non-critical)
  win_shell: choco install vim -y
  retries: 5
  delay: 5
  ignore_errors: yes

#    - name: Windows | Pull down Hybrid Git directory in zip format
#      win_shell: curl.exe -L -k {{ openshift_windows_git_url }}/archive/master.zip -o $env:TEMP\openshift-windows.zip
#      retries: 5
#      delay: 5

- name: Windows | Download the kubernetes node file
  win_get_url:
    url: "{{ openshift_windows_git_url }}/archive/master.zip"
    dest: C:\Windows\Temp\openshift-windows-master.zip
    validate_certs: no
    follow_redirects: all

#    - name: Windows | Extract Hybrid zip
#      win_shell: |
#        $ErrorActionPreference = "Stop"
#        Expand-Archive $env:TEMP\openshift-windows.zip -DestinationPath $env:TEMP
#        Move-Item -Path ${env:TEMP}\openshift-windows-master\* -Destination {{ k_dir_path }}\hybrid\ -Force
#        Remove-Item -Force -Path $env:TEMP\openshift-windows.zip -ErrorAction SilentlyContinue
#        Remove-Item -Recurse -Force -Path ${env:TEMP}\openshift-windows-master -ErrorAction SilentlyContinue

- name: Windows | Extract Hybrid zip
  win_unzip:
    src: C:\Windows\Temp\openshift-windows-master.zip
    dest: '{{ k_dir_path }}'

- name: Windows | Rename to Hybrid directory
  win_shell: Rename-Item -Path '{{ k_dir_path }}\openshift-windows-master' -NewName hybrid -ErrorAction SilentlyContinue

- name: Windows | Expand System Disk
  win_shell: '& "{{ k_dir_path }}\hybrid\3.11\bin\expand_disk.ps1"'

- name: Windows | Pull OpenvSwitch
  win_shell: curl.exe -L {{ openvswitch_installer_url }} -o $env:TEMP\openvswitch.msi
  retries: 5
  delay: 5
- name: Windows | Install Cloudbase certificate
  win_shell: certutil -addstore -f "TrustedPublisher" {{ k_dir_path }}\hybrid\3.11\bin\cloudbase.sst
- name: Windows | Install OpenvSwitch
  win_shell: |
    $ErrorActionPreference = "Stop"
    $ovs = Get-CimInstance -ClassName Win32_Product -Filter "Name LIKE 'Cloudbase Open vSwitch%'"
    if($ovs) {
        Write-Output "OpenvSwitch is already installed. Installed version: $($ovs.Version)"
        exit 0
    }
    $params = @("/i", "$env:TEMP\openvswitch.msi", 'ADDLOCAL="OpenvSwitchCLI,OpenvSwitchDriver,OVNHost"', "/qn")
    $p = Start-Process -FilePath "msiexec.exe" -ArgumentList $params -NoNewWindow -Wait -PassThru
    if($p.ExitCode) {
        Throw "Failed to install OpenvSwitch"
    }
    Remove-Item -Force -Path "$env:TEMP\openvswitch.msi" -ErrorAction SilentlyContinue
- name: Windows | Add Hybrid and OVS to system path
  win_shell: |
    $ErrorActionPreference = "Stop"
    $systemPath = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") -split ';'
    if("{{ item }}" -notin $systemPath) {
        $systemPath += "{{ item }}"
        [System.Environment]::SetEnvironmentVariable("PATH", ($systemPath -join ';'), "Machine")
    }
  with_items:
    - '{{ k_dir_path }}\hybrid\3.11\bin'
    - '${env:ProgramFiles}\Cloudbase Solutions\Open vSwitch\bin\'
- name: Windows | Start ovsdb-server Windows service
  win_service:
    name: ovsdb-server
    state: started