- hosts: masters[0]
  become: yes
  become_user: root
  tasks:
    - name: Get server url
      shell: "oc whoami --show-server"
      register: api_url

#    - name: create api host file
#      copy:
#        content: "{{ api_url.stdout }}"
#        dest: "{{ playbook_dir }}/api_host.txt"

    - name: Patch openshift-node/sync to only be on linux nodes
      shell: oc patch namespace openshift-node -p '{"metadata":{"annotations":{"openshift.io/node-selector":"beta.kubernetes.io/os=linux"}}}'

    - name: copy kube config to a variable
      slurp:
        src: /root/.kube/config
      register: kube_config

- hosts: masters[0]
  become: yes
  become_user: root
  tasks:
    - name: Ensure go is installed
      yum:
        name: golang
        enablerepo: rhel-7-server-optional-rpms

#    - name: Clear previous build if it exists
#      file:
#        path: ~/ovn-kubernetes
#        state: absent

#    - name: Clone to ovn-kubernetes repo
#      shell: git clone https://github.com/glennswest/ovn-kubernetes  ~/ovn-kubernetes

    - name: Clone ovn-kubernetes repo
      git:
        repo: https://github.com/glennswest/ovn-kubernetes
        dest: /root/ovn-kubernetes

#    - name: Build The Controller (Windows)
#      shell: cd ~/ovn-kubernetes;cd go-controller;make clean;make windows

    - name: Build the Controller (Windows)
      make:
        chdir: /root/ovn-kubernetes/go-controller
        target: "{{ item }}"
      loop:
        - clean
        - windows

- hosts: windows
  become_user: Administrator
  become_method: runas
  gather_facts: no
  vars:
    windows_docker_version: "18.03.1-ee-3"
    bin_dir_path: C:\bin
    k_dir_path: C:\k
    openvswitch_installer_url: https://cloudbase.it/downloads/openvswitch-hyperv-installer-beta.msi
    openshift_windows_git_url: https://github.com/openshift/openshift-windows
  tasks:
    - name: Windows | Setup all the Windows machines prerequisites (this may take a while)
      win_shell: |
        $ErrorActionPreference = "Stop"
        $reboot = $false
        $regNamespace = 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters'
        $key = Get-ItemProperty -Path $regNamespace -Name 'DisabledComponents' -ErrorAction SilentlyContinue
        if(!$key -or ($key.DisabledComponents.GetType() -ne [UInt32] -or $key.DisabledComponents -ne [Uint32]'0xffffffff')) {
            Remove-ItemProperty -Path $regNamespace -Name 'DisabledComponents' -ErrorAction SilentlyContinue
            Write-Output "Disabling IPv6"
            New-ItemProperty -Path $regNamespace -Name 'DisabledComponents' -Value '0xffffffff' -PropertyType 'DWord'
            $reboot = $true
        }
        $status = Get-WindowsFeature -Name "Hyper-V"
        if($status.InstallState -eq "Installed") {
            Remove-WindowsFeature "Hyper-V"
            bcdedit.exe /set hypervisorlaunchtype off
            if($LASTEXITCODE) {
                Throw "Failed to set bcd setting hypervisorlaunchtype to off"
            }
        }
        if($env:COMPUTERNAME -ne "{{ inventory_hostname_short }}") {
            Write-Output "Renaming the computer to {{ inventory_hostname_short }}"
            Rename-Computer -NewName "{{ inventory_hostname_short }}" -Force -Confirm:$false
            $reboot = $true
        }
        Write-Output "Installing the required Windows features"
        $state = Install-WindowsFeature -Name "Containers" -Confirm:$false -ErrorAction Stop
        if($state.Success -ne $true) {
            Throw "Failed to install Containers Windows feature"
        }
        if($state.RestartNeeded -eq "Yes") {
            $reboot = $true
        }
        Write-Output "Installing all the available Windows updates"
        Install-Package PSWindowsUpdate -Force
        $updates = Get-WUInstall -AcceptAll -IgnoreReboot
        $updates | ForEach-Object {
            if($_.RebootRequired) {
                $reboot = $true
            }
        }
        # Reboot if needed
        if($reboot) {
            Write-Output "Rebooting computer"
            Restart-Computer -Force
        }
    - name: Windows | Wait for the Windows machines to be ready after prerequisites setup
      wait_for_connection:
        # We reboot via PowerShell one task above. Wait 30 seconds before checking for
        # connection to make sure that node completely shuts down before starting again.
        delay: 30
        # 1 hour timeout (worst case scenario for all the Windows nodes)
        timeout: 3600
    - name: Windows | Install Docker
      win_shell: |
        $ErrorActionPreference = "Stop"
        Write-Output "Installing Docker {{ windows_docker_version }}"
        Find-PackageProvider -Name "Nuget" | Install-PackageProvider -Force
        Install-Module -Name "DockerMsftProvider" -Repository "PSGallery" -Force
        Install-Package -Name "Docker" -ProviderName "DockerMsftProvider" -Force
    - name: Windows | Setup Docker service
      win_shell: |
        $ErrorActionPreference = "Stop"
        $DOCKER_SERVICE_NAME = "Docker"
        Set-Service $DOCKER_SERVICE_NAME -StartupType Disabled
        Stop-Service $DOCKER_SERVICE_NAME
        Get-HnsNetwork | Where-Object { $_.Name -eq "nat" } | Remove-HnsNetwork
        $configFile = Join-Path $env:ProgramData "Docker\config\daemon.json"
        $configDir = Split-Path -Path $configFile -Parent
        if(!(Test-Path $configDir)) {
            New-Item -ItemType "Directory" -Force -Path $configDir
        }
        Set-Content -Path $configFile -Value '{ "bridge" : "none" }' -Encoding Ascii
        Set-Service $DOCKER_SERVICE_NAME -StartupType Automatic
        sc.exe failure $DOCKER_SERVICE_NAME reset=40 actions=restart/0/restart/0/restart/30000
        if($LASTEXITCODE) {
            Throw "Failed to set failure actions"
        }
        sc.exe failureflag $DOCKER_SERVICE_NAME 1
        if($LASTEXITCODE) {
            Throw "Failed to set failure flags"
        }
        Start-Service $DOCKER_SERVICE_NAME
    - name: Windows | Remove old Bin and K directories if it exists
      win_file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ bin_dir_path }}"
        - "{{ k_dir_path }}"
    - name: Windows | Create Bin and K directories
      win_file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ bin_dir_path }}"
        - "{{ k_dir_path }}"
    - name: Windows | Set ChocolateyBinRoot
      win_shell: setx -m ChocolateyBinRoot "{{ bin_dir_path }}"
    - name: Windows | Install Chocolatey package manager
      win_shell: |
        $ErrorActionPreference = "Stop"
        Set-ExecutionPolicy Bypass -Scope Process -Force
        Invoke-WebRequest -Uri "https://chocolatey.org/install.ps1" -UseBasicParsing | Invoke-Expression
      retries: 5
      delay: 5
    - name: Windows | Add Chocolatey and Bin to system path
      win_shell: |
        $ErrorActionPreference = "Stop"
        $systemPath = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") -split ';'
        if("{{ item }}" -notin $systemPath) {
            $systemPath += "{{ item }}"
            [System.Environment]::SetEnvironmentVariable("PATH", ($systemPath -join ';'), "Machine")
        }
      with_items:
        - '${env:ProgramData}\chocolatey\bin'
        - "{{ bin_dir_path }}"
    - name: Windows | Install nssm
      win_shell: choco install nssm -y
      retries: 5
      delay: 5
    - name: Windows | Install Vim (potential failures will be ignored since this is non-critical)
      win_shell: choco install vim -y
      retries: 5
      delay: 5
      ignore_errors: yes
    - name: Windows | Pull down Hybrid Git directory in zip format
      win_shell: curl.exe -L -k {{ openshift_windows_git_url }}/archive/master.zip -o $env:TEMP\openshift-windows.zip
      retries: 5
      delay: 5
    - name: Windows | Extract Hybrid zip
      win_shell: |
        $ErrorActionPreference = "Stop"
        Expand-Archive $env:TEMP\openshift-windows.zip -DestinationPath $env:TEMP
        Move-Item -Path ${env:TEMP}\openshift-windows-master\* -Destination {{ k_dir_path }}\hybrid\ -Force
        Remove-Item -Force -Path $env:TEMP\openshift-windows.zip -ErrorAction SilentlyContinue
        Remove-Item -Recurse -Force -Path ${env:TEMP}\openshift-windows-master -ErrorAction SilentlyContinue
    - name: Expand System Disk
      win_shell: '& "{{ k_dir_path }}\hybrid\3.11\bin\expand_disk.ps1"'
    - name: Windows | Pull OpenvSwitch
      win_shell: curl.exe -L {{ openvswitch_installer_url }} -o $env:TEMP\openvswitch.msi
      retries: 5
      delay: 5
    - name: Windows | Install Cloudbase certificate
      win_shell: certutil -addstore -f "TrustedPublisher" {{ k_dir_path }}\hybrid\3.11\bin\cloudbase.sst
    - name: Windows | Install OpenvSwitch
      win_shell: |
        $ErrorActionPreference = "Stop"
        $ovs = Get-CimInstance -ClassName Win32_Product -Filter "Name LIKE 'Cloudbase Open vSwitch%'"
        if($ovs) {
            Write-Output "OpenvSwitch is already installed. Installed version: $($ovs.Version)"
            exit 0
        }
        $params = @("/i", "$env:TEMP\openvswitch.msi", 'ADDLOCAL="OpenvSwitchCLI,OpenvSwitchDriver,OVNHost"', "/qn")
        $p = Start-Process -FilePath "msiexec.exe" -ArgumentList $params -NoNewWindow -Wait -PassThru
        if($p.ExitCode) {
            Throw "Failed to install OpenvSwitch"
        }
        Remove-Item -Force -Path "$env:TEMP\openvswitch.msi" -ErrorAction SilentlyContinue
    - name: Windows | Add Hybrid and OVS to system path
      win_shell: |
        $ErrorActionPreference = "Stop"
        $systemPath = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") -split ';'
        if("{{ item }}" -notin $systemPath) {
            $systemPath += "{{ item }}"
            [System.Environment]::SetEnvironmentVariable("PATH", ($systemPath -join ';'), "Machine")
        }
      with_items:
        - '{{ k_dir_path }}\hybrid\3.11\bin'
        - '${env:ProgramFiles}\Cloudbase Solutions\Open vSwitch\bin\'
    - name: Windows | Start ovsdb-server Windows service
      win_service:
        name: ovsdb-server
        state: started

- hosts: windows
  gather_facts: no
  serial: 1
  tasks:
#    - name: set up environment
#      shell: ln -f -s -n /etc/origin/ openshift.local.config
#      args:
#         chdir: /etc/origin
#      delegate_to: "{{ groups.masters | first }}"

    - name: Create a local config sym link
      file:
        src: /etc/origin
        dest: /etc/origin/openshift.local.config
        state: link
      delegate_to: "{{ groups.masters | first }}"

    - name: Create Config
      shell: oc adm create-node-config --hostnames={{inventory_hostname}} --node={{inventory_hostname}} --node-dir=/etc/origin/generated-configs/{{inventory_hostname}}
      args:
        chdir: /etc/origin/
      delegate_to: "{{ groups.masters | first }}"
    - name: Create node definition
      copy:
        dest: /etc/origin/generated-configs/{{inventory_hostname}}/{{inventory_hostname}}_definition.yaml
        content: |
          apiVersion: v1
          kind: Node
          metadata:
             annotations:
             labels:
               beta.kubernetes.io/arch: amd64
               beta.kubernetes.io/os: windows
               kubernetes.io/hostname: {{inventory_hostname_short}}
             name: {{inventory_hostname_short}}
             selfLink: /api/v1/nodes/{{inventory_hostname_short}}
          spec: {}

      delegate_to: "{{ groups.masters | first }}"
    - name: Define Node to Openshift
      shell: oc create -f /etc/origin/generated-configs/{{inventory_hostname}}/{{inventory_hostname}}_definition.yaml
      ignore_errors: yes
      delegate_to: "{{ groups.masters | first }}"
    - name: Get Node Subnet
      shell: oc get node {{inventory_hostname_short}}  --output=json | jq .metadata.annotations.ovn_host_subnet > /etc/origin/generated-configs/{{inventory_hostname}}/host.subnet
      delegate_to: "{{ groups.masters | first }}"
    - name: Create archives per host
      archive:
        path: /etc/origin/generated-configs/{{inventory_hostname}}/*
        dest: /etc/origin/generated-configs/{{inventory_hostname}}.zip
        format: zip
      delegate_to: "{{ groups.masters | first }}"

- hosts: masters[0]
  become: yes
  become_user: root
  tasks:
    - name: Create a archive of the node configs
      archive:
        path: /etc/origin/generated-configs/*
        dest:  /etc/origin/generated-configs.tgz
        mode:  666
    - name: Move the configs to local
      fetch:
        src:  /etc/origin/generated-configs.tgz
        dest: generated-configs.tgz
        flat: yes
    - name: Create the ovn scc account
      shell: oc create serviceaccount ovn
      ignore_errors: yes
    - name: add scc privileged for ovn
      shell: oc adm policy add-scc-to-user privileged -z ovn
    - name: Add the cluster role
      shell: oc adm policy add-cluster-role-to-user cluster-admin -z ovn
    - name: Save the token for later usage
      shell: oc sa get-token ovn
      register: ovn_key

#    - name: create ovn token file
#      copy:
#        content: "{{ ovn_key.stdout }}"
#        dest: "{{playbook_dir}}/ovn.token"

- hosts: masters[0]
  become: no
  gather_facts: no
  vars:
     user: "{{lookup('env','USER')}}"
  tasks:
    - name: Setup local origin structure
      file:
        path: '{{ playbook_dir }}/generated-configs'
        state: directory
      delegate_to: localhost

    - name: Extract configs
      unarchive:
        src: '{{ playbook_dir }}/generated-configs.tgz'
        dest: '{{ playbook_dir }}/generated-configs'
      delegate_to: localhost

    - name: Fix the access mode
      file:
        path: '{{ playbook_dir }}/generated-configs'
        owner: "{{ user }}"
        recurse: yes
      ignore_errors: yes
      delegate_to: localhost

    - name: Create windows directory for node files
      file:
        path: '{{ playbook_dir }}generated-configs/node-{{ groups.masters | first }}/windows'
        state: directory
      delegate_to: localhost

- hosts: windows
  become: no
  gather_facts: no
  serial: 1
  tasks:
#    - name: Pull the kubernetes node kubelet
#      win_shell: curl.exe -L -k https://dl.k8s.io/v1.11.3/kubernetes-node-windows-amd64.tar.gz -o C:\Windows\Temp\kubernetes.tar.gz
#      async: 3600
#      poll: 5

    - name: Download the kubernetes node file
      win_get_url:
        url: https://dl.k8s.io/v1.11.3/kubernetes-node-windows-amd64.tar.gz
        dest: C:\Windows\Temp\kubernetes.tar.gz
        validate_certs: no
        follow_redirects: all

#    - name: Install PSCX
#      win_psmodule:
#        name: Pscx
#        allow_clobber: yes
#        state: present

#    - name: Unzip kubernetes tar
#      win_unzip:
#        src: C:\Windows\Temp\kubernetes.tar.gz
#        dest: C:\Windows\Temp
#        creates: C:\Windows\Temp\kubernetes.tar
#
#    - name: Unzip kubernetes
#      win_unzip:
#        src: C:\Windows\Temp\kubernetes.tar
#        dest: C:\Windows\Temp
#        creates: C:\Windows\Temp\kubernetes\node\bin

    - name: Untar kubernetes
      win_shell: tar -xvzf c:\Windows\Temp\kubernetes.tar.gz -C \Windows\Temp

    - name: Copy kubernetes bin directory
      win_copy:
        src: C:\Windows\Temp\kubernetes\node\bin
        dest: C:\bin
        remote_src: yes

#    - name: Move the kube to bin
#      win_shell: copy "C:\Windows\Temp\kubernetes\node\bin\*" C:\bin

    - name: Ensure C:\k exists
      win_file:
        path: C:\k
        state: directory

    - name: move the node files
      win_copy:
        src: generated-configs/{{ inventory_hostname }}.zip
        dest: c:\k\{{ inventory_hostname }}.zip
        force: yes

#    - name: Unzip the config files
#      win_shell: tar -xvzf /k/{{inventory_hostname}}.zip  -C \k\

    - name: Unzip the config files
      win_unzip:
        src: c:\k\{{ inventory_hostname }}.zip
        dest: c:\k\

    - name: Add the master cluster config file
      win_copy:
        src: generated-configs/node-{{ groups.masters | first }}/windows/
        dest: /k/
        force: yes

    - name: Cleanup archive path
      win_file:
        path: c:\k\etc
        state: absent

    - name: Setup client config
      win_copy:
        content: "{{ hostvars[groups.masters[0]].kube_config['content'] | b64decode }}"
        dest: /k/config
        force: yes

    - name: Set kubeconfig
      win_shell: "[System.Environment]::SetEnvironmentVariable('KUBECONFIG', 'c:/k/config;c:/k/system-node-1.masters | first }}.kubeconfig', [System.EnvironmentVariableTarget]::Machine)"

    - name: Set kubeconfig
      win_shell: "[System.Environment]::SetEnvironmentVariable('KUBECONFIG', 'c:/k/config;c:/k/system-node-{{ groups.masters | first }}.kubeconfig')"

- hosts: windows
  become: no
  gather_facts: no
  serial: 1
  vars:
    k_dir_path: C:\k
    ovs_network_name: "external"
  tasks:
    - name: Windows | Prepare Windows scheduled tasks for the SDN setup
      win_scheduled_task:
        name: "setup_sdn"
        actions:
          - path: powershell.exe
            arguments: >
              -ExecutionPolicy Unrestricted -NonInteractive -Command
              "& '{{ k_dir_path }}\hybrid\3.11\bin\setup_sdn.ps1' -OVSNetworkName {{ ovs_network_name }}
              -SubnetFile {{ k_dir_path }}\host.subnet 2>&1 > '{{ k_dir_path }}\hybrid\3.11\bin\setup_sdn.log';
              Write-Output $LASTEXITCODE > {{ k_dir_path }}\hybrid\3.11\bin\setup_sdn.status"
        triggers:
          - type: boot
            enabled: true
        username: SYSTEM
    - name: Windows | Setup Windows SDN
      win_shell: Start-ScheduledTask -TaskName "setup_sdn"
    - name: Windows | Wait for Windows SDN setup
      wait_for_connection:
        # Allow 60 seconds for the setup_sdn task to finish. Connection will
        # temporarily drop during this period of time.
        delay: 60
        # Maximum of 10 minutes allowed timeout.
        timeout: 600
    - name: Windows | Check Windows SDN setup task
      win_shell: |
        $ErrorActionPreference = "Stop"
        $taskName = "setup_sdn"
        if((Get-ScheduledTask -TaskName $taskName).State -ne 'Ready') {
            Throw "The scheduled task $taskName is not ready"
        }
        Write-Output "The scheduled task is ready"
        $statusFile = "{{ k_dir_path }}\hybrid\3.11\bin\${taskName}.status"
        if(!(Test-Path $statusFile)) {
            Write-Output "Status file doesn't exist. Skipping"
            exit 0
        }
        $exitCode = Get-Content $statusFile
        if($exitCode -ne 0) {
            Throw "Scheduled task ${taskName} returned with error"
        }
        Write-Output "Scheduled task ${taskName} returned with success"
    - name: Windows | Clean up Windows SDN setup task
      win_scheduled_task:
        name: "setup_sdn"
        state: absent
    - name: Windows | Restart the Docker service
      win_service:
        name: Docker
        state: restarted
    - name: Windows | Check if the HNS network for OVS is available in the Docker API
      win_shell: |
        $ErrorActionPreference = "Stop"
        $net = docker.exe network ls --quiet --filter name={{ ovs_network_name }} --filter driver=transparent
        if($LASTEXITCODE) {
            Throw "Failed to list the Docker networks"
        }
        if(!$net) {
            Throw "The HNS network for OVS is not available in the Docker API"
        }

- hosts: windows
  become: no
  gather_facts: no
  vars:
    k_dir_path: C:\k
    ovs_network_name: "external"
  tasks:
    - name: Pull down windowsservercore 1809/Windows 2019 (Note this may take a long time)
      win_shell: docker image pull mcr.microsoft.com/windows/servercore:1809
      async: 50000
      poll: 5
    - name: Tag The image
      win_shell: docker tag mcr.microsoft.com/windows/servercore:1809  microsoft/windowsservercore:latest
    - name: Build the pause windows container
      win_shell: docker build . -t kubeletwin/pause
      args:
        chdir: '{{ k_dir_path }}\hybrid\3.11'

# Part 2
- hosts: windows
  become: no
  serial: 1
  tasks:
    - name: Create the master directory
      file: path="{{playbook_dir}}/{{ ansible_hostname }}" state=directory
      delegate_to: localhost
    - name: Create ovn_k8s.conf
      blockinfile:
        dest: "{{playbook_dir}}/{{ ansible_hostname }}/ovn_k8s.conf"
        create: yes
        block: |
          [default]
          encap-ip="{{lookup('dig',"{{ ansible_hostname }}")}}"

          [kubernetes]
          apiserver="{{ hostvars[groups.masters[0]].api_url.stdout }}"  # kubernetes api server, or the load balanced address for the multiple api server case
          token="{{ hostvars[groups.masters[0]].ovn_key.stdout }}"
          cacert=/k/ca.crt

          [ovnnorth]
          address="tcp://{{lookup('dig',groups.masters | first )}}:6641" # this master machine's IP address

          [ovnsouth]
          address="tcp://{{lookup('dig',groups.masters | first )}}:6642"

      delegate_to: localhost

- hosts: masters[0]
  gather_facts: no
  tasks:
    - name: Make sure bastion has exe dir
      file: path=/root/cni/bin state=directory
    - name: copy ovn-k8s-cni-overlay.exe
      fetch:
        src: /root/ovn-kubernetes/go-controller/_output/go/windows/ovn-k8s-cni-overlay.exe
        dest: /root/cni/bin/ovn-k8s-cni-overlay.exe
        force: yes
        flat: yes
    - name: copy ovn ovnkube.exe
      fetch:
        src: /root/ovn-kubernetes/go-controller/_output/go/windows/ovnkube.exe
        dest: /root/cni/bin/ovnkube.exe
        force: yes
        flat: yes

- hosts: windows
  become: no
  serial: 1
  tasks:
    - name: Mkdir \cni
      win_file:
        path: C:\cni
        state: directory
        ignore_errors: yes
    - name: Create 10-ovn-kubernetes.conf
      win_copy:
        dest: c:\cni\10-ovn-kubernetes.conf
        force: yes
        content: |
          {"cniVersion":"0.3.1","name":"ovn-kubernetes","type":"ovn-k8s-cni-overlay","ipam":{},"dns":{}}

    - name: Copy ovn_k8s.conf to cni directory
      win_copy:
        src: "{{playbook_dir}}/{{ansible_hostname}}/ovn_k8s.conf"
        dest: C:\cni\ovn_k8s.conf
        force: yes
    - name: Copy ovn_k8s.conf to windows nodes
      win_copy:
        src: "{{playbook_dir}}/{{ansible_hostname}}/ovn_k8s.conf"
        dest: C:\Program Files\Cloudbase Solutions\Open vSwitch\conf\ovn_k8s.conf
        force: yes
    - name: copy ovn-k8s-cni-overlay.exe
      win_copy:
        src: /root/cni/bin/ovn-k8s-cni-overlay.exe
        dest: /bin/ovn-k8s-cni-overlay.exe
        force: yes
    - name: copy ovn ovnkube.exe
      win_copy:
        src: /root/cni/bin/ovnkube.exe
        dest: /bin/ovnkube.exe
        force: yes

- hosts: windows
  become: no
  gather_facts: no
  tasks:
    - name: Add port 10250 to windows firewall rules
      win_shell: |
        $ErrorActionPreference = "Stop"
        $name = "kubelet"
        $rule = Get-NetFirewallRule -Name $name -ErrorAction SilentlyContinue
        if($rule) {
            # Delete existing rule if found
            Remove-NetFirewallRule -InputObject $rule
        }
        New-NetFirewallRule -Name $name -DisplayName 'Kubernetes Node' `
                            -Enabled True -Direction Inbound `
                            -Protocol TCP -Action Allow -LocalPort 10250
    - name: Add port 6081 to windows firewall rules
      win_shell: |
        $ErrorActionPreference = "Stop"
        $name = "ovn.6081"
        $rule = Get-NetFirewallRule -Name $name -ErrorAction SilentlyContinue
        if($rule) {
            # Delete existing rule if found
            Remove-NetFirewallRule -InputObject $rule
        }
        New-NetFirewallRule -Name $name -DisplayName $name -Enabled True `
                            -Direction Inbound -Protocol UDP -Action Allow -LocalPort 6081

# Part 2
- hosts: windows
  become: no
  gather_facts: no
  tasks:
    - name: Set up the GUID for openvswitch
      win_shell: "$GUID = (New-Guid).Guid; Write-Output $GUID"
      register: guid
    - debug: msg="GUID is {{ guid.stdout }}"
    - name: create a schedule task
      win_scheduled_task:
        name: ovnsetguid
        description: Set OVN System Guid
        actions:
          - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
            arguments: -ExecutionPolicy Unrestricted -NonInteractive ovs-vsctl set Open_vSwitch . external_ids:system-id="{{ guid.stdout | trim  }}"
        triggers:
          - type: boot
            enabled: true
        username: SYSTEM
    - name: Run the schedule task
      win_shell: Start-ScheduledTask -TaskName ovnsetguid -AsJob
    - name: Setup Kubeovn Service
      win_shell: setup_kubeovn_service.ps1
      args:
        chdir: \k\hybrid\3.11\bin
    - name: Setup Kubelet Service
      win_shell: setup_kubelet_service.ps1
      args:
        chdir: \k\hybrid\3.11\bin

# Part 3
- hosts: windows
  become: no
  serial: 1
  gather_facts: no
  tasks:
    - name: Setup Kubeovn Service
      win_shell: setup_kubeovn_service.ps1
      args:
        chdir: \k\hybrid\3.11\bin
    - name: Setup Kubelet Service
      win_shell: setup_kubelet_service.ps1
      args:
        chdir: \k\hybrid\3.11\bin
    - name: Enable kubeovn
      win_shell: Set-Service kubeovn -StartupType Automatic
    - name: Start kubeovn
      win_shell: Start-Service kubeovn
    - name: Enable kubelet
      win_shell: Set-Service ocpkubelet -StartupType Automatic
    - name: Start kubelet
      win_shell: Start-Service ocpkubelet
    - name: Sleep a while to make sure kubelet is up
      pause:
        minutes: 1
    - name: Add windows node label (compute=true)
      shell: oc label node "{{inventory_hostname_short}}" node-role.kubernetes.io/compute=true
      delegate_to: localhost
      retries: 10
      delay: 20